---->>>>The article I used to find the keywords of buffer overflow
      https://snyk.io/blog/buffer-overflow-attacks-in-c/




---->>>I updated this function so that it detect buffer overflow, replace in your code to run it

void StaticCodeAnalyzer::analyzeCode()
{
    if (currentFileContent.isEmpty()) {
        QMessageBox::warning(this, "Error", "No file loaded");
        return;
    }

    // Unsafe patterns related to functions prone to buffer overflows
    QRegularExpression unsafePatterns[] = {
        QRegularExpression("\\bstrcpy\\s*\\("),   // Match strcpy function
        QRegularExpression("\\bstrcat\\s*\\("),   // Match strcat function
        QRegularExpression("\\bstrcmp\\s*\\("),   // Match strcmp function
        QRegularExpression("\\bstrncat\\s*\\(\\s*[^,]*,[^,]*\\s*,\\s*[^,]*\\s*\\)"), // unsafe usage
        QRegularExpression("\\bscanf\\s*\\("),    // Match scanf function
        QRegularExpression("\\bfscanf\\s*\\("),   // Match fscanf function
        QRegularExpression("\\bsscanf\\s*\\("),   // Match sscanf function
        QRegularExpression("\\bgets\\s*\\("),     // Match gets function
        QRegularExpression("char\\s*\\*"),        // Match char pointer
        QRegularExpression("\\bchar\\s+\\w+\\s*\\[\\d+\\]"), // Match fixed size char arrays
        QRegularExpression("\\breinterpret_cast\\s*\\("), // Match reinterpret_cast
        QRegularExpression("\\bstrtok\\s*\\("),   // Match strtok function
        QRegularExpression("\\bsprintf\\s*\\("),  // Match sprintf function
        QRegularExpression("std::cin")            // Match std::cin
    };

    QStringList foundPatterns;
    QStringList possibleOverflows;

    // Check for unsafe patterns in the code
    for (const auto& pattern : unsafePatterns) {
        QRegularExpressionMatchIterator matchIter = pattern.globalMatch(currentFileContent);
        
        // For each match found, append the matched keyword from the code
        while (matchIter.hasNext()) {
            QRegularExpressionMatch match = matchIter.next();
            QString matchedText = match.captured(0); // Capture the whole match
            
            // Append the matched unsafe keyword to the found patterns list
            foundPatterns.append(matchedText);
        }

        // Additional checks for unsafe buffer-overflow risks like `strcpy` and `scanf`
        if (pattern.pattern() == "\\bstrcpy\\s*\\(") {
            QRegularExpression bufferSizePattern("\\bstrcpy\\s*\\(([^,]+),\\s*([^)]+)\\)");
            QRegularExpressionMatchIterator matchIter = bufferSizePattern.globalMatch(currentFileContent);
            while (matchIter.hasNext()) {
                QRegularExpressionMatch match = matchIter.next();
                QString destBuffer = match.captured(1); // Destination buffer
                QString srcString = match.captured(2); // Source string

                // Here you can add logic to compare buffer sizes, or look for hardcoded values or warnings
                if (destBuffer.length() > 10) { // Example check: if buffer length is too small for the string
                    possibleOverflows.append("Potential buffer overflow with strcpy: " + destBuffer);
                }
            }
        }

        if (pattern.pattern() == "\\bscanf\\s*\\(") {
            QRegularExpression scanfPattern("\\bscanf\\s*\\(\\s*\"%[a-zA-Z0-9%]+\"\\s*,\\s*[^)]+\\)");
            QRegularExpressionMatchIterator scanfIter = scanfPattern.globalMatch(currentFileContent);
            while (scanfIter.hasNext()) {
                QRegularExpressionMatch match = scanfIter.next();
                QString formatString = match.captured(1); // Format string
                // Check for format specifiers that can lead to buffer overflows
                if (formatString.contains("%s") && !formatString.contains("%[0-9]")) {
                    possibleOverflows.append("Potential buffer overflow risk with scanf: " + match.captured(0));
                }
            }
        }
    }

    // Display results
    if (!foundPatterns.isEmpty() || !possibleOverflows.isEmpty()) {
        QString result = "Unsafe Patterns Found:\n" + foundPatterns.join("\n");
        result += "\n\nPossible Buffer Overflow Risks:\n" + possibleOverflows.join("\n");
        ui->labelResult->setText(result);
    } else {
        ui->labelResult->setText("No unsafe patterns or buffer overflow risks found.");
    }
}











---->>>unsafe words that cause buffer overflow 

//////////////////////////////////////////////////////////////////////////////////////////////////// 

Not Safe APIs 

C-style String Functions: 

strcpy 

strcat 

strcmp 

strncat (if improperly used with incorrect size) 

C-style Input Functions: 

scanf 

fscanf 

sscanf 

gets (deprecated but commonly used) 

Unsafe Memory Operations: 

Raw pointers (e.g., char*) 

Fixed-size arrays (e.g., char input[8]) 

reinterpret_cast (can lead to unsafe conversions) 

Legacy Functions: 

gets 

strtok 

sprintf (can overflow if not properly handled) 

Keywords to Avoid 

char* 

int array[15] 

scanf 

fscanf 

sscanf 

strcpy 

strcat 

std::cin 

<cstdio> 

<cstring> 

strncat (if used incorrectly) 

reinterpret_cast (potentially unsafe conversions) 

sprintf (risk of overflow) 

 

Not Safe APIs 

C-style String Functions: 

strncat (if improperly used with incorrect size) 

C-style Input Functions: 

gets (deprecated but commonly used) 

Unsafe Memory Operations: 

reinterpret_cast (can lead to unsafe conversions) 

Legacy Functions: 

sprintf (can overflow if not properly handled) 




----->>> A buffer overflow occurs when a program writes more data to a buffer than it can hold, causing adjacent memory to be overwritten. This can lead to crashes, unexpected behavior, or allow attackers to execute malicious code.

////how buffer overflow occurs

how an attacker could breach a student’s code using a buffer overflow:

Finding a Vulnerable Program: The attacker looks for a program (like the student’s code) that doesn’t properly check how much data it receives. For example, if the program accepts user input without limits, it might be vulnerable.

Sending Overlarge Input: The attacker sends a carefully crafted input that exceeds the buffer’s size. For instance, if the program allows a user to enter their name into a fixed-size array but doesn’t check the length, the attacker might input a name that’s much longer than expected.

Overwriting Memory: As this long input is processed, it spills over into adjacent memory locations. This can overwrite important data, like the program's return address (where the program should go next after executing a function).

Injecting Malicious Code: The attacker can include malicious code in the input. When the buffer overflows, the attacker’s code can be placed in memory where the program will execute it.

Taking Control: When the program tries to return from the function, it looks at the overwritten return address and instead goes to the location where the attacker’s code is stored, running that code instead of what was intended.

Performing Malicious Actions: Now, the attacker can execute whatever commands they designed in their malicious code, potentially stealing data, corrupting files, or taking control of the system.
